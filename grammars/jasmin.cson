'scopeName': 'source.mil'
'fileTypes': [
  'mil'
]
'firstLineMatch': '(?i)-\\*-[^*]*(Mode:\\s*)?mil(\\s*;.*?)?\\s*-\\*-'
'name': 'Jasmin'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'match': '\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\\b'
    'name': 'keyword.control.mil'
  }
  {
    'include': '#storage_types'
  }
  {
    'match': '\\b(export|fn|inline|reg)\\b'
    'name': 'storage.modifier.mil'
  }
  {
    # Common naming idiom for C constants: "kConstantVariable"
    'match': '\\bk[A-Z]\\w*\\b'
    'name': 'constant.other.variable.mac-classic.mil'
  }
  {
    'match': '\\bg[A-Z]\\w*\\b'
    'name': 'variable.other.readwrite.global.mac-classic.mil'
  }
  {
    'match': '\\bs[A-Z]\\w*\\b'
    'name': 'variable.other.readwrite.static.mac-classic.mil'
  }
  {
    'match': '\\b(NULL|true|false|TRUE|FALSE)\\b'
    'name': 'constant.language.mil'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#strings'
  }
  {
    'begin': '''(?x)
      ^\\s* ((\\#)\\s*define) \\s+    # define
      ((?<id>[a-zA-Z_$][\\w$]*))      # macro name
      (?:
        (\\()
          (
            \\s* \\g<id> \\s*         # first argument
            ((,) \\s* \\g<id> \\s*)*  # additional arguments
          )
        (\\))
      )?
    '''
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.define.mil'
      '2':
        'name': 'punctuation.definition.directive.mil'
      '3':
        'name': 'entity.name.function.preprocessor.mil'
      '5':
        'name': 'punctuation.definition.parameters.begin.mil'
      '6':
        'name': 'variable.parameter.preprocessor.mil'
      '8':
        'name': 'punctuation.separator.parameters.mil'
      '9':
        'name': 'punctuation.definition.parameters.end.mil'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.macro.mil'
    'patterns': [
      {
        'include': '#preprocessor-rule-define-line-contents'
      }
    ]
  }
  {
    'begin': '^\\s*((#)\\s*line)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.line.mil'
      '2':
        'name': 'punctuation.definition.directive.mil'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.mil'
    'patterns': [
      {
        'include': '#strings'
      }
      {
        'include': '#numbers'
      }
      {
        'include': '#line_continuation_character'
      }
    ]
  }
  {
    # Reserved POSIX types
    'match': '\\b([A-Za-z0-9_]+_t)\\b'
    'name': 'support.type.posix-reserved.mil'
  }
  {
    'include': '#block'
  }
  {
    'include': '#parens'
  }
  {
    # FIRST CAPTURE meta.function.c scope (provides an injectable scope, balanced parentheses and prevents unnecessary scope nesting)
    'begin': '''(?x)
      (?!(?:fn|while|for|do|if|else|return|u64|bool|char|int|short)\\s*\\()
      (?=
        (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name
        |
        (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(
      )
    '''
    'end': '(?<=\\))(?!\\w)'
    'name': 'meta.function.mil'
    'patterns': [
      {
        'include': '#function-innards'
      }
    ]
  }
  {
    'include': '#line_continuation_character'
  }
  {
    'match': '(\\[)|(\\])'
    'captures':
      '1':
        'name': 'punctuation.definition.begin.bracket.square.mil'
      '2':
        'name': 'punctuation.definition.end.bracket.square.mil'
  }
  {
    'match': ';'
    'name': 'punctuation.terminator.statement.mil'
  }
  {
    'match': ','
    'name': 'punctuation.separator.delimiter.mil'
  }
]
'repository':
  'access':
    'captures':
      '2':
        'name': 'punctuation.separator.dot-access.mil'
      '3':
        'name': 'punctuation.separator.pointer-access.mil'
      '4':
        'name': 'variable.other.member.mil'
    'match': '((\\.)|(->))\\s*(([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\())?'
  'block':
    'patterns': [
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.bracket.curly.mil'
        'end': '}|(?=\\s*#\\s*(?:elif|else|endif)\\b)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.bracket.curly.mil'
        'name': 'meta.block.mil'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'block_innards':
    'patterns': [
      {
        'include': '#access'
      }
      {
        'include': '#mil_function_call'
      }
      {
        'captures':
          '1':
            'name': 'variable.other.mil'
          '2':
            'name': 'punctuation.definition.parameters.mil'
        'match': '''(?x)
          (?:
            (?:
              (?=\\s)(?<!else|new|return)
              (?<=\\w) \\s+  # or word + space before name
            )
          )
          (
            (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name
            |
            (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))
          )
          \\s*(\\() # opening bracket
        '''
        'name': 'meta.initialization.mil'
      }
      {
        # Prevent unnecessary nesting of meta.block.c scope
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.bracket.curly.mil'
        'end': '}|(?=\\s*#\\s*(?:elif|else|endif)\\b)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.bracket.curly.mil'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
      {
        'include': '#parens-block'
      }
      {
        'include': '$base'
      }
    ]
  'mil_function_call':
    # FIRST CAPTURE meta.function-call.c scope (provides an injectable scope, balanced parentheses and prevents unnecessary scope nesting)
    'begin': '''(?x)
      (?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()
      (?=
      (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name
      |
      (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(
      )
    '''
    'end': '(?<=\\))(?!\\w)'
    'name': 'meta.function-call.mil'
    'patterns': [
      {
        'include': '#function-call-innards'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block.mil'
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'name': 'comment.block.mil'
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.mil'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.mil'
        'name': 'comment.block.mil'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.mil'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line.mil'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.cpp'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.cpp'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.cpp'
            'end': '(?=\\n)'
            'name': 'comment.line.double-slash.cpp'
            'patterns': [
              {
                'include': '#line_continuation_character'
              }
            ]
          }
        ]
      }
    ]
  'line_continuation_character':
    'patterns': [
      {
        'match': '(\\\\)\\n'
        'captures':
          '1':
            'name': 'constant.character.escape.line-continuation.mil'
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F\']*[0-9a-fA-F])?)|(0(b|B)[01]([01\']*[01])?)|(([0-9]([0-9\']*[0-9])?\\.?[0-9]*([0-9\']*[0-9])?)|(\\.[0-9]([0-9\']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9\']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric.mil'
      }
    ]
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.bracket.round.mil'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.bracket.round.mil'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'parens-block':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.bracket.round.mil'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.bracket.round.mil'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '(?<![\\w$])(sizeof)(?![\\w$])'
        'name': 'keyword.operator.sizeof.mil'
      }
      {
        'match': '--'
        'name': 'keyword.operator.decrement.mil'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.mil'
      }
      {
        'match': '%=|\\+=|-=|\\*=|(?<!\\()/='
        'name': 'keyword.operator.assignment.compound.mil'
      }
      {
        'match': '&=|\\^=|<<=|>>=|\\|='
        'name': 'keyword.operator.assignment.compound.bitwise.mil'
      }
      {
        'match': '<<|>>'
        'name': 'keyword.operator.bitwise.shift.mil'
      }
      {
        'match': '!=|<=|>=|==|<|>'
        'name': 'keyword.operator.comparison.mil'
      }
      {
        'match': '&&|!|\\|\\|'
        'name': 'keyword.operator.logical.mil'
      }
      {
        'match': '&|\\||\\^|~'
        'name': 'keyword.operator.mil'
      }
      {
        'match': '='
        'name': 'keyword.operator.assignment.mil'
      }
      {
        'match': '%|\\*|/|-|\\+'
        'name': 'keyword.operator.mil'
      }
      {
        'begin': '\\?'
        'beginCaptures':
          '0':
            'name': 'keyword.operator.ternary.mil'
        'end': ':'
        'applyEndPatternLast': true # To prevent matching C++ namespace access ::
        'endCaptures':
          '0':
            'name': 'keyword.operator.ternary.mil'
        'patterns': [
          {
            'include': '#access'
          }
          {
            'include': '#mil_function_call'
          }
          {
            'include': '$base'
          }
        ]
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.mil'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.mil'
        'name': 'string.quoted.double.mil'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.mil'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.mil'
        'name': 'string.quoted.single.mil'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '''(?x)\\\\ (
            \\\\             |
            [abefnprtv'"?]   |
            [0-3]\\d{,2}     |
            [4-7]\\d?        |
            x[a-fA-F0-9]{,2} |
            u[a-fA-F0-9]{,4} |
            U[a-fA-F0-9]{,8} )
        '''
        'name': 'constant.character.escape.mil'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.mil'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '''(?x) %
          (\\d+\\$)?                           # field (argument #)
          [#0\\- +']*                          # flags
          [,;:_]?                              # separator character (AltiVec)
          ((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width
          (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
          [diouxXDOUeEfFgGaACcSspn%]           # conversion type
        '''
        'name': 'constant.other.placeholder.mil'
      }
      {
        'match': '(%)(?!"\\s*(PRI|SCN))'
        'captures':
          '1':
            'name': 'invalid.illegal.placeholder.mil'
      }
    ]
  'storage_types':
    'patterns': [
      {
        'match': '\\b(int|long|short|signed|struct|typedef|u64|union|unsigned|void)\\b'
        'name': 'storage.type.mil'
      }
    ]
  'function-innards':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#storage_types'
      }
      {
        'include': '#operators'
      }
      {
        'begin': '''(?x)
          (?!(?:fn|while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()
          (
          (?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
          |
          (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
          )
          \\s*(\\()
        '''
        'beginCaptures':
          '1':
            'name': 'entity.name.function.mil'
          '2':
            'name': 'punctuation.section.parameters.begin.bracket.round.mil'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.parameters.end.bracket.round.mil'
        'patterns': [
          {
            'include': '#function-innards'
          }
        ]
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.section.parens.begin.bracket.round.mil'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.parens.end.bracket.round.mil'
        'patterns': [
          {
            'include': '#function-innards'
          }
        ]
      }
      {
        'include': '$base'
      }
    ]
  'function-call-innards':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#storage_types'
      }
      {
        'include': '#access'
      }
      {
        'include': '#operators'
      }
      {
        'begin': '''(?x)
          (?!(?:fn|while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()
          (
          (?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
          |
          (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
          )
          \\s*(\\()
        '''
        'beginCaptures':
          '1':
            'name': 'entity.name.function.mil'
          '2':
            'name': 'punctuation.section.arguments.begin.bracket.round.mil'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.arguments.end.bracket.round.mil'
        'patterns': [
          {
            'include': '#function-call-innards'
          }
        ]
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.section.parens.begin.bracket.round.mil'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.parens.end.bracket.round.mil'
        'patterns': [
          {
            'include': '#function-call-innards'
          }
        ]
      }
      {
        'include': '#block_innards'
      }
    ]
